# ==============================================================================
#
#  Modular Video Processing Workflow
#
#  This workflow processes a video into a bootanimation through a series of
#  specialized, dependent jobs. This multi-job approach improves efficiency
#  and maintainability compared to a single-job configuration.
#
# ==============================================================================

name: Process Video for Bootanimation

on:
  workflow_dispatch:
    inputs:
      video:
        description: 'FileID of a video to process'
        required: true
      other_metadata:
        description: '[JSON] Other metadata including {chatId, messageId, userId, title, creator}'
        required: false

env:
  BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  STORAGE_PROVIDER_API_KEY: ${{ secrets.STORAGE_PROVIDER_API_KEY }}

jobs:
  # =====================================================================================
  # JOB 1: SETUP
  # - Parses metadata, validates inputs, and downloads the video file.
  # =====================================================================================
  setup:
    name: "Phase 1: Setup & Download"
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.parse_metadata.outputs.json_string }}
      msg_metadata: ${{ steps.parse_metadata.outputs.msg_metadata }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Install dependencies (jq, curl)"
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: "Parse and validate metadata"
        id: parse_metadata
        run: |
          METADATA_JSON='${{ inputs.other_metadata }}'
          PARSED_META=$(echo "${METADATA_JSON}" | jq -c '{ "jobId": .jobId, "chatId": .msg_metadata.chatId, "messageId": .msg_metadata.messageId, "title": .title, "creator": .creator, "ref_message_id": .ref_message_id }')
          MSG_METADATA=$(echo "${METADATA_JSON}" | jq -c '{ "chat_id": .msg_metadata.chatId, "message_id": .msg_metadata.messageId }')
          echo "json_string=${PARSED_META}" >> "$GITHUB_OUTPUT"
          echo "msg_metadata=${MSG_METADATA}" >> "$GITHUB_OUTPUT"

      - name: "Send 'Setup Started' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "processing"
          message: "🚀 Workflow initiated. Setting up environment..."
          msg_metadata: ${{ steps.parse_metadata.outputs.msg_metadata }}
          progress: 5

      - name: "Download video file"
        id: download
        run: |
          set -e
          FILE_ID="${{ inputs.video }}"
          BOT_TOKEN="${{ env.BOT_TOKEN }}"
          API_RESPONSE=$(curl -s "https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${FILE_ID}")
          if [[ "$(echo "$API_RESPONSE" | jq -r '.ok')" != "true" ]]; then
            echo "❌ Telegram API Error: $(echo "$API_RESPONSE" | jq -r '.description')" >&2; exit 1
          fi
          FILE_PATH=$(echo "$API_RESPONSE" | jq -r '.result.file_path')
          curl -s -L -o "video.mp4" "https://api.telegram.org/file/bot${BOT_TOKEN}/${FILE_PATH}"
          echo "✅ Video downloaded successfully."

      - name: "Upload video for next job"
        uses: actions/upload-artifact@v4
        with:
          name: video-artifact
          path: video.mp4
          retention-days: 1

  # =====================================================================================
  # JOB 2: PROCESS & PACKAGE (MERGED)
  # - Processes the video using an FFmpeg container.
  # - Immediately packages the output into the final flashable module.
  # =====================================================================================
  process_and_package:
    name: "Phase 2 & 3: Process & Package"
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      module_filename: ${{ steps.package_module.outputs.filename }}
      boot_video_duration: ${{ steps.create_boot.outputs.boot_video_duration }}
      boot_video_fps: ${{ steps.create_boot.outputs.boot_video_fps }}
      boot_video_resolution: ${{ steps.create_boot.outputs.boot_video_resolution }}
      boot_bootanimation_resolution: ${{ steps.create_boot.outputs.boot_bootanimation_resolution }}
      boot_bootanimation_module_type: ${{ steps.create_boot.outputs.boot_bootanimation_module_type }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Install jq"
        uses: dcarbone/install-jq-action@v2

      - name: "Cache FFmpeg Docker image"
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: docker-image-cache
          key: ${{ runner.os }}-ffmpeg-4.4-ubuntu

      - name: "Load or Pull FFmpeg image"
        run: |
          mkdir -p docker-image-cache
          if [ -f docker-image-cache/ffmpeg.tar ]; then
            echo "Loading FFmpeg from cache..."
            docker load -i docker-image-cache/ffmpeg.tar
          else
            echo "Pulling FFmpeg from registry..."
            docker pull jrottenberg/ffmpeg:4.4-ubuntu
            docker save jrottenberg/ffmpeg:4.4-ubuntu -o docker-image-cache/ffmpeg.tar
          fi

      - name: "Download video artifact"
        uses: actions/download-artifact@v4
        with:
          name: video-artifact

      - name: "Send 'Processing Started' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "processing"
          message: "🎬 Video processing has started..."
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}
          progress: 25

      - name: "Create bootanimation parts using FFmpeg container"
        id: create_boot
        run: |
          chmod +x scripts/prepare_bootanimation.sh
          OUTPUT_STRING=$(docker run --rm -v "$(pwd):/workdir" -w /workdir jrottenberg/ffmpeg:4.4-ubuntu ./scripts/prepare_bootanimation.sh video.mp4)
          echo "$OUTPUT_STRING" >> "$GITHUB_OUTPUT"
          BOOT_DIR=$(echo "$OUTPUT_STRING" | grep 'boot_output_dir=' | cut -d'=' -f2)
          echo "boot_output_dir_path=${BOOT_DIR}" >> "$GITHUB_OUTPUT"

      - name: "Send 'Packaging Started' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "processing"
          message: "📦 Packaging the flashable module..."
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}
          progress: 65

      - name: "Package the flashable module"
        id: package_module
        run: |
          chmod +x scripts/package_module.sh
          MODULE_NAME=$(echo '${{ needs.setup.outputs.metadata }}' | jq -r '.title')
          MODULE_CREATOR=$(echo '${{ needs.setup.outputs.metadata }}' | jq -r '.creator.name')
          FINAL_FILENAME=$(scripts/package_module.sh "${{ steps.create_boot.outputs.boot_output_dir_path }}" ./scripts/module_template --module-name "$MODULE_NAME" --module-creator "$MODULE_CREATOR")
          echo "filename=${FINAL_FILENAME}" >> "$GITHUB_OUTPUT"

      - name: "Upload final module for next job"
        uses: actions/upload-artifact@v4
        with:
          name: final-module-artifact
          path: ${{ steps.package_module.outputs.filename }}
          retention-days: 1


  # =====================================================================================
  # JOB 3: DEPLOY
  # - Uploads the final module and sends the "completed" status.
  # =====================================================================================
  deploy:
    name: "Phase 4: Deploy & Notify"
    runs-on: ubuntu-latest
    needs: [setup, process_and_package]

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Download final module artifact"
        uses: actions/download-artifact@v4
        with:
          name: final-module-artifact

      - name: "Send 'Uploading' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "processing"
          message: "☁️ Uploading module to storage..."
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}
          progress: 85

      - name: "Upload module and get download link"
        id: upload
        run: |
          chmod +x scripts/upload_file.sh
          DOWNLOAD_LINK=$(scripts/upload_file.sh "${{ needs.process_and_package.outputs.module_filename }}")
          echo "download_link=${DOWNLOAD_LINK}" >> "$GITHUB_OUTPUT"
      
      - name: "Send 'Finalizing' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "processing"
          message: "✅ Upload complete. Finalizing post..."
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}
          progress: 100

      - name: "Prepare final post metadata"
        id: post_data
        run: |
          POST_METADATA=$(jq -n -c \
            --argjson base_meta '${{ needs.setup.outputs.metadata }}' \
            --arg download_url '${{ steps.upload.outputs.download_link }}' \
            --arg video_res '${{ needs.process_and_package.outputs.boot_video_resolution }}' \
            --arg boot_res '${{ needs.process_and_package.outputs.boot_bootanimation_resolution }}' \
            --arg boot_fps '${{ needs.process_and_package.outputs.boot_video_fps }}' \
            --arg boot_type '${{ needs.process_and_package.outputs.boot_bootanimation_module_type }}' \
            --arg duration '${{ needs.process_and_package.outputs.boot_video_duration }}' \
            '
              {
                "title": $base_meta.title,
                "creator": { "user_id": $base_meta.creator.id, "name": $base_meta.creator.name },
                "download_url": $download_url,
                "video": { "file_id": "${{ inputs.video }}", "ref_message_id": $base_meta.ref_message_id },
                "details": {
                  "resolution": { "module": $boot_res, "video": $video_res },
                  "fps": ($boot_fps | tonumber),
                  "duration": ($duration | tonumber | round),
                  "type": $boot_type
                }
              }
            '
          )
          echo "post_metadata=$POST_METADATA" >> "$GITHUB_OUTPUT"

      - name: "Send 'Completed' status"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "completed"
          message: "✅ Success! Your bootanimation is ready."
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}
          data: ${{ steps.post_data.outputs.post_metadata }}

  # =====================================================================================
  # JOB 4: NOTIFY FAILURE
  # - This job only runs if any of the previous jobs in the chain fail.
  # =====================================================================================
  notify_failure:
    name: "Notify on Failure"
    runs-on: ubuntu-latest
    needs: [setup, process_and_package, deploy]
    if: failure() && !cancelled()

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        
      - name: "Send Failure Notification"
        uses: ./.github/actions/send-status
        env:
          TELEGRAM_BOT_WEBHOOK_URL: ${{ secrets.TELEGRAM_BOT_WEBHOOK_URL }}
        with:
          status: "failed"
          message: "An error occurred during the workflow. Please report to @a1x5h04"
          msg_metadata: ${{ needs.setup.outputs.msg_metadata }}

