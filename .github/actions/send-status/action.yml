name: 'Send Status Update'
description: 'Sends a status update to a webhook. The TELEGRAM_BOT_WEBHOOK_URL environment variable must be set as a secret.'

inputs:
  status:
    description: 'The status to send (pending, processing, completed, failed)'
    required: true
  message:
    description: 'A descriptive message for the status update'
    required: true
  msg_metadata:
    description: 'The Telegram message metadata as a JSON string (must contain chat_id and message_id)'
    required: true
  data:
    description: 'A JSON string for "completed" status (e.g., post metadata)'
    required: false
  progress:
    description: 'A progress percentage (0-100) for "processing" status'
    required: false

runs:
  using: "composite"
  steps:
    - name: "Validate Inputs"
      id: validate
      shell: bash
      run: |
        # Exit immediately if a command exits with a non-zero status.
        set -e

        # --- Basic Validations ---
        if [[ -z "${{ inputs.msg_metadata }}" ]]; then
          echo "❌ Error: msg_metadata is required." >&2
          exit 1
        fi

        if ! echo "${{ inputs.msg_metadata }}" | jq -e . >/dev/null; then
          echo "❌ Error: msg_metadata must be a valid JSON object." >&2
          exit 1
        fi
        
        # --- Extract and Validate Metadata ---
        CHAT_ID=$(echo "${{ inputs.msg_metadata }}" | jq -r '.chat_id')
        MESSAGE_ID=$(echo "${{ inputs.msg_metadata }}" | jq -r '.message_id')

        if [[ -z "$CHAT_ID" || "$CHAT_ID" == "null" || -z "$MESSAGE_ID" || "$MESSAGE_ID" == "null" ]]; then
          echo "❌ Error: msg_metadata must contain non-null 'chat_id' and 'message_id' keys." >&2
          exit 1
        fi
        
        # --- Conditional Validations based on status ---
        case "${{ inputs.status }}" in
          processing)
            if [[ -z "${{ inputs.progress }}" ]]; then
              echo "❌ Error: 'progress' input is required for 'processing' status." >&2
              exit 1
            fi
            ;;
          completed)
            if [[ -z "${{ inputs.data }}" ]]; then
              echo "❌ Error: 'data' input is required for 'completed' status." >&2
              exit 1
            fi
            if ! echo "${{ inputs.data }}" | jq -e . >/dev/null; then
              echo "❌ Error: 'data' input must be a valid JSON string for 'completed' status." >&2
              exit 1
            fi
            ;;
        esac

        # --- Expose validated data to subsequent steps ---
        echo "chat_id=$CHAT_ID" >> "$GITHUB_OUTPUT"
        echo "message_id=$MESSAGE_ID" >> "$GITHUB_OUTPUT"

    - name: "Generate JSON Payload"
      id: generate_payload
      shell: bash
      run: |
        set -e

        # Build the base JSON payload with common fields
        # This approach safely handles numeric IDs and avoids string injection issues.
        BASE_PAYLOAD=$(jq -n \
          --arg status "${{ inputs.status }}" \
          --arg message "${{ inputs.message }}" \
          --argjson chatId "${{ steps.validate.outputs.chat_id }}" \
          --argjson messageId "${{ steps.validate.outputs.message_id }}" \
          '{
            status: $status,
            message: $message,
            tg_metadata: {
              "chatId": $chatId,
              "messageId": $messageId
            }
          }')

        # Conditionally add fields to the payload based on the status
        case "${{ inputs.status }}" in
          processing)
            # Add the 'progress' field
            PAYLOAD=$(echo "$BASE_PAYLOAD" | jq --argjson progress "${{ inputs.progress }}" '. + {progress: $progress}')
            ;;
          completed)
            # Add the 'post_metadata' field
            PAYLOAD=$(echo "$BASE_PAYLOAD" | jq --argjson data "${{ inputs.data }}" '. + {post_metadata: $data}')
            ;;
          pending|failed)
            # No additional fields are needed
            PAYLOAD="$BASE_PAYLOAD"
            ;;
          *)
            echo "❌ Error: Invalid status '${{ inputs.status }}' encountered." >&2
            exit 1
            ;;
        esac

        echo "payload=$PAYLOAD" >> "$GITHUB_OUTPUT"

    - name: "Send Payload to Webhook"
      id: send_payload
      shell: bash
      run: |
        set -e
        
        # Check that the webhook URL secret is available
        : "${TELEGRAM_BOT_WEBHOOK_URL?Error: TELEGRAM_BOT_WEBHOOK_URL environment variable must be set.}"

        echo "🚀 Sending notification..."
        curl --request POST \
             --header "Content-Type: application/json" \
             --data '${{ steps.generate_payload.outputs.payload }}' \
             --silent --show-error --fail \
             "$TELEGRAM_BOT_WEBHOOK_URL"
        
        echo "✅ Notification sent successfully."