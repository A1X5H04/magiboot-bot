import { FormattedString } from "https://esm.sh/@grammyjs/parse-mode@2.2.0";
import { JobStatus } from "../types/queue.ts";
import { createProgressBar } from "./generators.ts";
import { PostMetadata } from "../types/schema.ts";
import { TGUserInfo } from "../types/bot.ts";

type KnownError = Error & {
    code?: string;
    status?: number;
};

type StatusMessage = {
    status: JobStatus;
    message: string;
    progress: number | undefined;
}

const statusMap = {
    "completed": {
        icon: "‚úÖ",
        title: "Completed!"
    },
    "failed": {
        icon: "‚ùå",
        title: "Failed."
    },
    "pending": {
        icon: "‚è≥",
        title: "Pending"
    },
    "processing": {
        icon: "‚öôÔ∏è",
        title: "Processing..."
    }
}

export function createStatusMessage({ status, message, progress }: StatusMessage) {
    const statusMessageWithoutProgress = FormattedString.b(`${statusMap[status].icon} Status: `).plain(statusMap[status].title).plain("\n")
        .b("Message: ").plain(message)

    if (status === "completed" || status === "failed" || status === "pending") {
        return statusMessageWithoutProgress;
    }

    return new FormattedString("").concat(statusMessageWithoutProgress).plain("\n\n").plain(`Progress: ${createProgressBar(progress ?? 0)}`)

}

export function createBootanimationPost({ title, creator, details }: Omit<PostMetadata, "download_url" | "video">) {
    return FormattedString.b(`üéûÔ∏è ${title}`).plain("\n\n")
        .b("Details:\n")
        .plain("‚Ä¢ Resolution: ").code(`${details.resolution.module} [${details.resolution.video}]`).plain("\n")
        .plain("‚Ä¢ FPS: ").code(details.fps).plain("\n")
        .plain("‚Ä¢ Duration: ").code(`${details.duration}s`).plain("\n")
        .plain("‚Ä¢ Type: ").code(details.type)
        .plain("\n\n")
        .b("‚öôÔ∏è How to Use").plain("\n")
        .plain("Flash the module via your favorite root solution: Magisk / KernelSU")
        .plain("\n\n")
        .b("‚ú® Credits").plain("\n")
        .plain("‚Ä¢ Animation By: ").link(creator.name, `tg://user?id=${creator.user_id}`).plain("\n")
        .plain("‚Ä¢ Generated By: @magibootbot")
        .plain("\n\n")
        .plain("üë• Join: @magiboot and @magibootcommunity" ).plain("\n")
        .plain("üì¢ Follow for more animations & updates").plain("\n")
        .plain("üõ†Ô∏è Issues? ").link("Report Here", "https://t.me/magibootchat")
}

export function createErrorMessage(
    err: KnownError,
    contextAction = "processing your request",
): FormattedString {
    // Extract safe error details
    const errType = err.name ?? "UnknownError";
    const errMsg = err.message ?? "No details provided.";
    const errCode = err.code ?? "N/A";

    // If you want to hide raw error messages from users, you can toggle this
    const showDetails = true; // change to false for production

    const message = FormattedString.b("‚ö†Ô∏è Oops! Something went wrong.").plain("\n\n")
        .plain(`There was an error while ${contextAction}.\n`)
        .plain("Please contact @a1x5h04 if the issue persists.");

    if (showDetails) {
        message.plain("\n\n")
            .b("Error Details:\n")
            .plain(`‚Ä¢ Type: `).code(errType).plain("\n")
            .plain(`‚Ä¢ Message: `).code(errMsg).plain("\n")
            .plain(`‚Ä¢ Code: `).code(errCode);
    }

    return message;
}

export function createDuplicatePostErrorMessage({ name, message_id, user }: { name: string; message_id: number; user: TGUserInfo; }) {
    return FormattedString.b("üîÅ Duplicate Post Detected!").plain("\n\n")
        .b("Post Name: ").plain(name).plain("\n")
        .b("Original Post: ")
        .link("View Here", `https://t.me/magibootcommunity/${message_id}`).plain("\n")
        .b("Created By: ")
        .link(user.first_name, `tg://user?id=${user.id}`).plain("\n\n")
        .plain("You tried to upload a post that already exists.");
}


export function createValidationErrorMessage(errors: string[]) {
    const errorCount = errors.length;
    if (errorCount === 0) {
        return FormattedString.b("Validation Failed! üòµ‚Äçüí´").plain("\n\nAn unknown error occurred.");
    }

    let message = FormattedString.b("Validation Failed! üòµ‚Äçüí´").plain("\n\n")
        .plain("Please fix the following " + (errorCount > 1 ? "errors" : "error") + " and try again:");
    errors.forEach(error => {
        message = message.plain("\n‚Ä¢ ").plain(error);
    });

    return message;
}