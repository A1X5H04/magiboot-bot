import { FormattedString } from "https://esm.sh/@grammyjs/parse-mode@2.2.0";
import { decodeBase64 } from "https://deno.land/std/encoding/base64.ts";

import { JobStatus } from "../types/queue.ts";
import { createProgressBar } from "./generators.ts";
import { PostMetadata } from "../types/schema.ts";
import { TGUserInfo } from "../types/bot.ts";
import { LeaderboardEntry } from "../services/leaderboard.ts";
import { TG_CHANNEL_ID } from "./constants.ts";
import { RankedPost } from "../repositories/post.ts";

type KnownError = Error & {
    code?: string;
    status?: number;
};

type StatusMessage = {
    status: JobStatus;
    message: string;
    progress: number | undefined;
    error_log_b64?: string;
}

export interface EnrichedRankedPost extends RankedPost {
    rank: number;
    creator: TGUserInfo;
}

const statusMap = {
    "completed": {
        icon: "‚úÖ",
        title: "Completed!"
    },
    "failed": {
        icon: "‚ùå",
        title: "Failed."
    },
    "pending": {
        icon: "‚è≥",
        title: "Pending"
    },
    "processing": {
        icon: "‚öôÔ∏è",
        title: "Processing..."
    }
}

export function createStatusMessage({ status, message, progress, error_log_b64 }: StatusMessage) {
    const statusMessage = FormattedString.b(`${statusMap[status].icon} Status: `).plain(statusMap[status].title).plain("\n")
        .b("Message: ").plain(message)


    if (status === "failed" && error_log_b64) {
        try {
            const logBytes = decodeBase64(error_log_b64)
            const decodedLogs = new TextDecoder().decode(logBytes);
            statusMessage.plain("\n\n").b("Error Details: ").plain("\n").plain(decodedLogs);
        } catch (e) {
            statusMessage.plain("\n\n").b("Error Details:").plain("\n").plain("Failed to decode error log.");
        }
    }

    if (status === "completed" || status === "failed" || status === "pending") {
        return statusMessage;
    }

    return new FormattedString("").concat(statusMessage).plain("\n\n").plain(`Progress: ${createProgressBar(progress ?? 0)}`)

}

export function createBootanimationPost({ title, creator, details, tags }: Omit<PostMetadata, "download_url" | "video">) {
    const tagString = tags.map(t => `#${t}`).join(' ');

    return new FormattedString(tagString).plain("\n\n")
    .b(`üéûÔ∏è ${title}`).plain("\n\n")
        .b("Details:\n")
        .plain("‚Ä¢ Resolution: ").code(`${details.resolution.module} [${details.resolution.video}]`).plain("\n")
        .plain("‚Ä¢ FPS: ").code(details.fps).plain("\n")
        .plain("‚Ä¢ Duration: ").code(`${details.duration}s`).plain("\n")
        .plain("‚Ä¢ Type: ").code(details.type)
        .plain("\n\n")
        .b("‚öôÔ∏è How to Use").plain("\n")
        .plain("Flash the module via your favorite root solution: Magisk / KernelSU")
        .plain("\n\n")
        .b("‚ú® Credits").plain("\n")
        .plain("‚Ä¢ Animation By: ").link(creator.name, `tg://user?id=${creator.user_id}`).plain("\n")
        .plain("‚Ä¢ Generated By: @magibootbot")
        .plain("\n\n")
        .plain("üë• Join: @magibootcommunity and @magiboot" ).plain("\n")
        .plain("üì¢ Follow for more animations & updates").plain("\n")
        .plain("üõ†Ô∏è Issues? ").link("Report Here", "https://t.me/magibootchat")
}

export function createErrorMessage(
    err: KnownError,
    contextAction = "processing your request",
): FormattedString {
    // Extract safe error details
    const errType = err.name ?? "UnknownError";
    const errMsg = err.message ?? "No details provided.";
    const errCode = err.code ?? "N/A";

    // If you want to hide raw error messages from users, you can toggle this
    const showDetails = true; // change to false for production

    const message = FormattedString.b("‚ö†Ô∏è Oops! Something went wrong.").plain("\n\n")
        .plain(`There was an error while ${contextAction}.\n`)
        .plain("Please contact @a1x5h04 if the issue persists.");

    if (showDetails) {
        message.plain("\n\n")
            .b("Error Details:\n")
            .plain(`‚Ä¢ Type: `).code(errType).plain("\n")
            .plain(`‚Ä¢ Message: `).code(errMsg).plain("\n")
            .plain(`‚Ä¢ Code: `).code(errCode);
    }

    return message;
}

export function createDuplicatePostErrorMessage({ name, message_id, user }: {
    name: string;
    message_id: number;
    user: TGUserInfo;
}) {
    return FormattedString
        .b("üîÅ Duplicate Post Detected!")
        .plain("\n\n")
        .i("This post already exists in the community.")
        .plain("\n\n")
        .b("üìÑ Post: ").plain(name).plain("\n")
        .b("üîó Original: ").link("View on Channel", `https://t.me/magibootcommunity/${message_id}`).plain("\n")
        .b("üë§ Author: ").link(user.first_name, `tg://user?id=${user.id}`)
        .plain("\n\n")
        .i("Please modify your post before uploading again.");
}

export function createValidationErrorMessage(errors: string[]) {
    const errorCount = errors.length;
    if (errorCount === 0) {
        return FormattedString.b("Validation Failed! üòµ‚Äçüí´").plain("\n\nAn unknown error occurred.");
    }

    let message = FormattedString.b("Validation Failed! üòµ‚Äçüí´").plain("\n\n")
        .plain("Please fix the following " + (errorCount > 1 ? "errors" : "error") + " and try again:");
    errors.forEach(error => {
        message = message.plain("\n‚Ä¢ ").plain(error);
    });

    return message;
}


export function createLeaderBoardMessage(entries: LeaderboardEntry[]) {
    console.log("Leaderboard", entries);
    let message = new FormattedString("").b(`üèÜ Top 10 Creators`).plain("\n\n");

    if (entries.length === 0) {
        message = message.plain("No votes yet, go react your favourite bootanimations.");
        return message;
    }

    const medals = ["ü•á", "ü•à", "ü•â"];


    for (const entry of entries) {
        const rankIcon = medals[entry.rank - 1] || ` ${entry.rank.toString()}. `

        message = message
            .plain(rankIcon).plain(" ")
            .b(entry.score.toString()).plain(" pts").plain(" ‚Äî ")
            .link(entry.user.first_name, `tg://user?id=${entry.user.id}`)
            .plain("\n")
            .plain("     ‚Ä¢  ")
            .plain(entry.total_votes.toString()).plain(" votes, ")
            .plain(entry.total_downloads.toString()).plain(" downloads\n");
    }

    return message;
}

export function createRankedPostsMessage(
    posts: EnrichedRankedPost[],
    title: string
): FormattedString {
    let message = new FormattedString("").b(title).plain("\n\n");

    if (posts.length === 0) {
        message = message.plain("No posts found for this category. Be the first!");
        return message;
    }

    const medals = ["ü•á", "ü•à", "ü•â"];

    for (const post of posts) {
        const rankIcon = medals[post.rank - 1] || ` ${post.rank.toString()}. `;
        
        let tags: string[] = [];
        if (post.tags) {
            try {
                tags = JSON.parse(post.tags);
            } catch (e) { /* ignore invalid json */ }
        }
        const tagString = tags.map(t => `#${t}`).join(' ');

        message = message
            .plain(rankIcon)
            .link(post.name, `https://t.me/c/${TG_CHANNEL_ID.replace("-100", "")}/${post.message_id}`)
            .plain("\n")            
            .plain("     ‚Ä¢  ")
            .b(post.download_count.toString()).plain(" downloads")
            .plain(" | ")
            .b(post.votes.toString()).plain(" votes")
            .plain("\n")
            .plain("     ‚Ä¢  By: ")
            .link(post.creator.first_name, `tg://user?id=${post.creator.id}`)
            .plain("\n");
        
        if (tagString) {
            message = message.plain("     ‚Ä¢  Tags: ").i(tagString).plain("\n");
        }
    }

    return message;
}